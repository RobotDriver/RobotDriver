/*
 * File: app/view/BaseControlSlider.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RobotDriver.view.BaseControlSlider', {
    extend: 'Ext.Container',
    alias: 'widget.basecontrolslider',

    requires: [
        'RobotDriver.view.BaseControlSliderViewModel',
        'Ext.Container',
        'Ext.field.Slider'
    ],

    viewModel: {
        type: 'basecontrolslider'
    },
    defaultListenerScope: true,

    items: [
        {
            xtype: 'container',
            hidden: true,
            itemId: 'motorFwdRevLabel',
            userCls: 'steering-label',
            layout: 'hbox',
            items: [
                {
                    xtype: 'container',
                    itemId: 'rev',
                    html: 'Reverse',
                    margin: '0 0 0 100'
                },
                {
                    xtype: 'container',
                    flex: 1,
                    itemId: 'spacer'
                },
                {
                    xtype: 'container',
                    itemId: 'fwd',
                    html: 'Forward'
                }
            ]
        },
        {
            xtype: 'sliderfield',
            bubbleEvents: [
                'change'
            ],
            itemId: 'slider',
            label: 'Name',
            liveUpdate: true,
            maxValue: 1000,
            readOnly: true,
            listeners: {
                change: 'onSliderChange'
            }
        }
    ],
    listeners: {
        painted: 'onContainerPainted'
    },

    onSliderChange: function(me, newValue, oldValue, eOpts) {

    },

    onContainerPainted: function(sender, element, eOpts) {
        if(this.init){
            return;
        }else{
            this.init = true;
        }

        if(element.component.config.label){
            this.setLabel(element.component.config.label);
        }
        if(element.component.config.hardware && element.component.config.hardware.type === 'motor'){
            this.showMotorLabels();
        }else{
            this.hideMotorLabels();
        }
    },

    setLabel: function(label) {
        this.queryById('slider').setLabel(label);
    },

    hideMotorLabels: function() {
        this.queryById('motorFwdRevLabel').hide();
        this.setValue(0);
    },

    showMotorLabels: function() {
        this.queryById('motorFwdRevLabel').show();
        this.setValue(500);
    },

    setValue: function(value) {
        this.queryById('slider').setValue(value);
    }

});