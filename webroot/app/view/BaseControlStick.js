/*
 * File: app/view/BaseControlStick.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RobotDriver.view.BaseControlStick', {
    extend: 'Ext.Container',
    alias: 'widget.basecontrolstick',

    requires: [
        'RobotDriver.view.BaseControlStickViewModel',
        'Ext.Container'
    ],

    viewModel: {
        type: 'basecontrolstick'
    },
    height: 150,
    userCls: 'stick-container',
    width: 150,
    maxHeight: 150,
    maxWidth: 150,
    defaultListenerScope: true,

    items: [
        {
            xtype: 'container',
            height: 80,
            userCls: 'stick-inner-container',
            width: 80,
            html: '<div class="stick"></div>',
            margin: '35 35 0 35',
            maxHeight: 80,
            maxWidth: 80
        },
        {
            xtype: 'container',
            height: 30,
            itemId: 'label',
            userCls: 'stick-label'
        }
    ],
    listeners: {
        painted: 'onContainerPainted'
    },

    onContainerPainted: function(sender, element, eOpts) {
        if(this.init){
            return;
        }else{
            this.init = true;
        }

        if(element.component.config.label){
            this.setLabel(element.component.config.label);
        }else{
            this.setLabel('');
        }

        let stickRange = 50;

        this.virtualStick = createStick(element.dom.getElementsByClassName('stick')[0], stickRange, 'left', function(pos){
            var x = Math.round((pos.x/stickRange) * 100);
            var y = Math.round((pos.y/stickRange) * 100) * -1; //invert Y values
            this.fireEvent('change', x, y);
        }.bind(this));

    },

    setLabel: function(text) {
        this.label = text;
        this.queryById('label').setHtml(text);
    },

    getLabel: function() {
        return this.label;
    },

    setRawValue: function(x,y) {
        console.log(x,y, 'invert', x*-1, y*-1);

        //TODO this is backwards. why?
        //invert
        x *= -1;
        y *= -1;

        this.virtualStick.stick.style.transform = `translate3d(${y*50}px, ${z=x*50}px, 0px)`;
    }

});