/*
 * File: app/view/GamepadItemMap.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RobotDriver.view.GamepadItemMap', {
    extend: 'Ext.Panel',
    alias: 'widget.gamepaditemmap',

    requires: [
        'RobotDriver.view.GamepadItemMapViewModel',
        'Ext.Container',
        'Ext.Button',
        'Ext.field.ComboBox'
    ],

    viewModel: {
        type: 'gamepaditemmap'
    },
    border: true,
    margin: '6 0 0 0',
    padding: '0 0 6 10',
    layout: 'vbox',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'container',
            height: 32,
            userCls: 'mapped-to',
            margin: '10 0 0 0',
            layout: 'hbox',
            items: [
                {
                    xtype: 'container',
                    width: 100,
                    html: 'Mapped To:',
                    margin: '6 0 0 10'
                },
                {
                    xtype: 'container',
                    itemId: 'mappedTo',
                    html: '<font color="red">Press Button/Move Axis On Controller</font>',
                    margin: '6 0 0 0'
                },
                {
                    xtype: 'button',
                    hidden: false,
                    itemId: 'remap',
                    margin: '0 0 0 10',
                    iconCls: 'x-fa fa-pencil-square-o',
                    text: 'Remap',
                    listeners: {
                        tap: 'onMybuttonTap'
                    }
                },
                {
                    xtype: 'container',
                    flex: 1
                },
                {
                    xtype: 'button',
                    itemId: 'delete',
                    margin: '0 10 0 0',
                    iconCls: 'x-fa fa-trash',
                    text: 'Delete',
                    listeners: {
                        tap: 'onDeleteTap1'
                    }
                }
            ]
        },
        {
            xtype: 'combobox',
            disabled: true,
            itemId: 'control',
            name: 'control',
            width: 367,
            label: 'Control',
            labelTextAlign: 'right',
            labelWidth: 110,
            displayField: 'display',
            valueField: 'controlId',
            queryCaching: false,
            queryMode: 'local',
            bind: {
                store: '{controlStore}'
            }
        },
        {
            xtype: 'textfield',
            itemId: 'name',
            name: 'name',
            width: 300,
            label: 'Name (optional)',
            labelWidth: 110,
            clearable: false
        }
    ],
    listeners: {
        painted: 'onPanelPainted'
    },

    onMybuttonTap: function(button, e, eOpts) {
        this.fireEvent('remap', this);
        this.setMapping(false);
    },

    onDeleteTap1: function(button, e, eOpts) {
        this.fireEvent('mapDelete', this);
    },

    onPanelPainted: function(sender, element, eOpts) {
        if(this.init){
            return;
        }else{
            this.init = true;
        }

        this.mapping = {};

        this.setControlStoreData(element.component.config.controlsDataStoreData);

        if(element.component.config.mapConfig){
            let config = element.component.config.mapConfig;
            this.setMapping(config.gamepadId, config.gamepadIndex, config.mapType, config.mapIndex);
            this.queryById('name').setValue(config.name);
            this.queryById('control').setValue(config.controlId);
        }
    },

    setMapping: function(gamepadId, gamepadIndex, mapType, mapIndex) {
        if(gamepadId === false){
            this.mapping = false;
            this.queryById('remap').hide();

            this.queryById('control').setValue(null);
            this.queryById('control').disable();

            this.queryById('mappedTo').setHtml('<font color="red">Press Button/Move Axis On Controller</font>');
            return;
        }

        this.mapping = {
            gamepadId:gamepadId,
            gamepadIndex:gamepadIndex,
            mapType:mapType,
            mapIndex:mapIndex
        };

        this.getViewModel().getStore('controlStore').clearFilter();
        switch(mapType){
            case 'button':
                this.getViewModel().getStore('controlStore').filter('type','button');
                break;
            case 'axis':
                this.getViewModel().getStore('controlStore').filter('type','slider');
                break;
        }

        this.queryById('mappedTo').setHtml(gamepadId + " "+mapType+" #"+ (parseInt(mapIndex)+1) );
        this.queryById('control').enable();
        this.queryById('remap').show();
    },

    getMapping: function() {
        this.mapping.name = this.queryById('name').getValue();
        this.mapping.controlId = this.queryById('control').getValue();

        return this.mapping;
    },

    setControlStoreData: function(data) {
        this.getViewModel().getStore('controlStore').loadData(data);
    }

});