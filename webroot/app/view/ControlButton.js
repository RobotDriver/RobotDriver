/*
 * File: app/view/ControlButton.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RobotDriver.view.ControlButton', {
    extend: 'Ext.Container',
    alias: 'widget.controlbutton',

    requires: [
        'RobotDriver.view.ControlButtonViewModel',
        'Ext.Container'
    ],

    viewModel: {
        type: 'controlbutton'
    },
    defaultListenerScope: true,

    items: [
        {
            xtype: 'container',
            itemId: 'buttonStyles'
        },
        {
            xtype: 'container',
            itemId: 'virctrlbuttonFire',
            style: {
                'font-size': '40px'
            },
            html: '<button class="control-button"><span class="control-button-icon"></span></button>'
        },
        {
            xtype: 'container',
            height: 35,
            itemId: 'previewName',
            style: {
                'text-align': 'center'
            },
            width: 70,
            margin: '0 0 0 10',
            maxWidth: 150
        }
    ],
    listeners: {
        painted: 'onContainerPainted'
    },

    onContainerPainted: function(sender, element, eOpts) {
        if(this.init){
            return;
        }else{
            this.init = true;
        }

        this.button = this.el.dom.querySelector('.control-button');
        if(this.buttonId){
            this.button.id = this.buttonId;
        }else{
            this.buttonId = 'control-button-'+Ext.id();
            this.button.id = this.buttonId;
        }

        createFireButton(this.button, function(state){

            if(state==='down'){
                if(this.buttonActionType==='toggle'){
                    this.button.classList.add("toggledown");
                    if(this.buttonToggled === true){
                        this.buttonToggled = false;
                    }else{
                        this.fireEvent('down'); //toggledown
                        this.buttonToggled = true;
                    }
                }else{
                    this.fireEvent('down');
                }

            }else if(state==='up'){
                if(this.buttonActionType==='toggle'){
                    if(this.buttonToggled === false){
                        this.fireEvent('up'); // toggleup
                        this.button.classList.remove("toggledown");
                    }
                }else{
                    this.fireEvent('up');
                }

            }

        }.bind(this));
    },

    updateButtonStyles: function(color, colorShadow, contrastColor) {
        let styleContainer = this.queryById('buttonStyles').bodyElement.dom;

        styleContainer.innerHTML = '';

        if(!this.buttonId){
            this.buttonId = 'control-button-'+Ext.id();
        }

        let styles = document.createElement("style");
        let stylesText = document.createTextNode(
            `button#${this.buttonId} .control-button-icon:before {\r\n`+
            `  color: ${contrastColor}; \r\n`+
            `}\r\n`+
            `button#${this.buttonId} { \r\n`+
            `  background-color: ${color}; \r\n`+
            `  box-shadow: 0 8px ${colorShadow}; \r\n`+
            `}\r\n`+
            `button#${this.buttonId}:hover { \r\n`+
            `  box-shadow: 0 7px ${colorShadow}; \r\n`+
            `}\r\n`+
            `button#${this.buttonId}.pressed {\r\n `+
            `  box-shadow: 0 0 ${colorShadow}; \r\n`+
            `}\r\n`+
            `button#${this.buttonId}.toggledown { \r\n`+
            `  box-shadow: 0 1px ${colorShadow}; \r\n`+
            `  top: 7px; \r\n`+
            `}\r\n`
        );
        styles.appendChild(stylesText);

        styleContainer.appendChild(styles);
    },

    setButtonActionType: function(type) {
        this.buttonActionType = type;

        if(type !== 'toggle'){
            if(this.button && this.button.classList){
                this.button.classList.remove("toggledown");
            }
            this.buttonToggled = false;
        }
    },

    setButtonIcon: function(icon) {
        iconel = this.el.dom.querySelector(".control-button-icon");
        iconel.className = 'control-button-icon x-fa fa-'+icon;
    },

    setLabel: function(label) {
        this.queryById('previewName').setHtml(label);
    },

    setConfigValues: function(config) {
        this.setLabel(config.label);
        this.setButtonIcon(config.icon);
        this.setButtonActionType(config.actionType);

        this.configColor = config.color;
        this.configColorShadow = config.colorShadow;
        this.configContrastColor = config.iconColor;

        this.updateButtonStyles(config.color, this.configColorShadow, this.configContrastColor);
    },

    setValue: function(value) {
        if(value === 'down'){
            this.button.classList.add("toggledown");
        }else{
            this.button.classList.remove("toggledown");
        }
        this.fireEvent(value);
    }

});