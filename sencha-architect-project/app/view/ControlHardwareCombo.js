/*
 * File: app/view/ControlHardwareCombo.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RobotDriver.view.ControlHardwareCombo', {
    extend: 'Ext.Container',
    alias: 'widget.controlhardwarecombo',

    requires: [
        'RobotDriver.view.ControlHardwareComboViewModel',
        'Ext.field.ComboBox',
        'Ext.XTemplate'
    ],

    viewModel: {
        type: 'controlhardwarecombo'
    },
    itemId: 'hardware',
    padding: 10,
    defaultListenerScope: true,

    items: [
        {
            xtype: 'combobox',
            itemId: 'hardwareCombo',
            label: 'Hardware',
            labelWidth: 70,
            matchFieldWidth: false,
            displayField: 'display',
            itemTpl: [
                '{type} {name}'
            ],
            valueField: 'hardwareId',
            forceSelection: true,
            minChars: 1,
            queryCaching: false,
            queryMode: 'local',
            typeAhead: true,
            bind: {
                store: '{hardwareComboStore}'
            },
            listeners: {
                select: 'onHardwareSelect'
            }
        },
        {

        }
    ],

    onHardwareSelect: function(combobox, newValue, oldValue, eOpts) {
        this.fireEvent('select',newValue);
    },

    syncHardwareStore: function(store) {
        let hardwareStore = this.getViewModel().getStore('hardwareComboStore');

        hardwareStore.removeAll();

        store.getData().each(function(rec){
            let newRec = rec.clone();
            newRec.set('display',newRec.get('type')+' '+newRec.get('name'));
            hardwareStore.add(newRec);
        },this);
    },

    getHardwareId: function() {
        let sel = this.queryById('hardwareCombo').getSelection();

        if(sel === null){
            return null;
        }

        return sel.data.hardwareId;
    },

    setHardwareId: function(hardwareId) {
        this.queryById('hardwareCombo').setValue(hardwareId);
    }

});