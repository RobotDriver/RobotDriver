/*
 * File: app/view/liveControls.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RobotDriver.view.liveControls', {
    extend: 'Ext.Container',
    alias: 'widget.livecontrols',

    requires: [
        'RobotDriver.view.liveControlsViewModel',
        'Ext.Container'
    ],

    viewModel: {
        type: 'livecontrols'
    },

    items: [
        {
            xtype: 'container',
            itemId: 'buttons',
            layout: 'hbox'
        },
        {
            xtype: 'container',
            itemId: 'controls',
            layout: 'vbox'
        }
    ],

    loadConfig: function(controlConfigs, hardware) {
        this.hardware = hardware;

        if(!this.buttonsContainer){
            this.buttonsContainer = this.queryById('buttons');
        }
        if(!this.controlsContainer){
            this.controlsContainer = this.queryById('controls');
        }
        this.buttonsContainer.removeAll(true, true);
        this.controlsContainer.removeAll(true, true);

        this.liveControls = {};
        this.liveControlsByHardware = {};

        Ext.each(controlConfigs, function(config){
            this.liveControlAdd(config);
        },this);

        return {
            controlId: this.liveControls,
            hardwareId: this.liveControlsByHardware
        };
    },

    liveControlAdd: function(config) {
        config = config || false;

        if(!config || (!config.hardwareId && !config.xhardwareId && !config.yhardwareId)){
            return;
        }

        var control;
        let controlConfig = {};

        config.hardware = this.hardware[config.hardwareId];

        console.log(config.controlId, config.hardwareId, config.type, config );
        switch(config.type){
            default:
                return false;
            case 'slider':

                Ext.apply(controlConfig,{
                    xtype: 'basecontrolslider',
                    margin:5,
                    label: config.label || false,
                    hardwareId: config.hardwareId,
                    hardware: this.hardware[config.hardwareId],
                    listeners:{
                        scope:this,
                        change:function(field, value){
                            if(value.constructor === Array){
                                value = value[0];//live update sends arrays for some reason
                            }
                            this.fireEvent('websocketSend',{
                                action:'control',
                                hardwareId:config.hardwareId,
                                value:value
                            });
                        }
                    }
                });
                break;
            case 'stick':
                Ext.apply(controlConfig,{
                    xtype: 'basecontrolstick',
                    label: config.label || false,
                    listeners:{
                        scope:this,
                        change:function(x, y){
                            this.fireEvent('websocketSend',{
                                action:'control',
                                hardwareId:config.xhardwareId,
                                value:x
                            });
                            this.fireEvent('websocketSend',{
                                action:'control',
                                hardwareId:config.yhardwareId,
                                value:y
                            });
                        }
                    }
                });
                break;
            case 'button':
                Ext.apply(controlConfig,{
                    xtype: 'controlbutton',
                    listeners:{
                        scope:this,
                        down:function(){
                            let msg = {
                                action:'control',
                                hardwareId:config.hardwareId
                            };

                            if(config.actionType === 'setValue'){
                                msg.valueMs = config.value;
                                msg.value = msg.valueMs;
                            }else{
                                msg.actionType = config.actionType;
                                msg.value = config.value;
                            }
                            this.fireEvent('websocketSend',msg);
                        },
                        up:function(){
                            let msg = {
                                action:'control',
                                hardwareId:config.hardwareId
                            };
                            if(config.actionType === 'setValue'){
                                msg.valueMs = this.hardware[config.hardwareId].startingPosition;
                                msg.value = msg.valueMs;
                            }else{
                                msg.actionType = config.actionType;
                                msg.value = config.value;
                            }

                            this.fireEvent('websocketSend',msg);
                        }
                    }
                });

                break;
            //case 'motorslider':
            //    panelConfig.xtype = 'controlmotorslider';
            //    break;
        }

        control = Ext.create(controlConfig);

        switch(config.type){
            case 'stick':
            case 'button':
                this.buttonsContainer.add(control);
                break;
            case 'motorslider':
            case 'slider':
                this.controlsContainer.add(control);
                break;

        }

        if(config && control.setConfigValues){
            control.setConfigValues(config);
        }

        if(config.type === 'stick'){
            this.liveControls[config.controlId] = control;
            this.liveControlsByHardware[config.xhardwareId] = control;
            this.liveControlsByHardware[config.yhardwareId] = control;
        }else{
            this.liveControls[config.controlId] = control;
            this.liveControlsByHardware[config.hardwareId] = control;
        }
    }

});