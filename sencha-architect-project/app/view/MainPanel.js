/*
 * File: app/view/MainPanel.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Modern library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Modern. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RobotDriver.view.MainPanel', {
    extend: 'Ext.tab.Panel',
    alias: 'widget.mainpanel',

    requires: [
        'RobotDriver.view.MainPanelViewModel',
        'RobotDriver.view.liveController',
        'RobotDriver.view.liveControls',
        'RobotDriver.view.GamepadMapping',
        'Ext.Panel',
        'Ext.Button',
        'Ext.chart.CartesianChart',
        'Ext.chart.axis.Numeric',
        'Ext.chart.series.Line',
        'Ext.field.Toggle',
        'Ext.tab.Panel',
        'Ext.tab.Bar',
        'Ext.Spacer',
        'Ext.field.TextArea'
    ],

    config: {
        deferredRender: false
    },

    viewModel: {
        type: 'mainpanel'
    },
    activeItem: 4,
    fullscreen: true,
    padding: '4 0 0 0',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'panel',
            itemId: 'tabControls',
            scrollable: true,
            iconCls: 'x-fa fa-gamepad',
            title: 'Control',
            items: [
                {
                    xtype: 'button',
                    margin: '10 0 0 10',
                    iconCls: 'x-fa fa-gamepad',
                    text: 'Open Controller',
                    listeners: {
                        tap: 'onMybutton8Tap'
                    }
                },
                {
                    xtype: 'livecontroller',
                    itemId: 'liveController',
                    listeners: {
                        action: 'onContainerAction'
                    }
                },
                {
                    xtype: 'livecontrols',
                    itemId: 'liveControls',
                    listeners: {
                        websocketSend: 'onContainerWebsocketSend'
                    }
                },
                {
                    xtype: 'container',
                    itemId: 'debugOutputLabel',
                    html: 'Debug Output',
                    margin: 10
                },
                {
                    xtype: 'container',
                    height: 240,
                    itemId: 'debugOutputContainerOuter',
                    userCls: 'debugOutputContainer',
                    margin: 10,
                    scrollable: 'vertical',
                    layout: 'vbox',
                    items: [
                        {
                            xtype: 'container',
                            itemId: 'debugOutputContainer'
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'panel',
            itemId: 'tabVideo',
            layout: 'vbox',
            iconCls: 'x-fa fa-camera',
            title: 'Video',
            items: [
                {
                    xtype: 'container',
                    padding: 10,
                    defaults: {
                        margin: '0 0 0 10',
                        height: 50
                    },
                    layout: 'hbox',
                    items: [
                        {
                            xtype: 'container',
                            itemId: 'videoStatus',
                            width: 150,
                            html: 'Status',
                            padding: '20 0 0 0'
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnView',
                            width: 120,
                            iconCls: 'x-fa fa-play',
                            text: 'Start Video',
                            listeners: {
                                tap: 'onBtnViewTap'
                            }
                        },
                        {
                            xtype: 'button',
                            itemId: 'btnStop',
                            width: 120,
                            iconCls: 'x-fa fa-stop',
                            text: 'Stop Video',
                            listeners: {
                                tap: 'onBtnStopTap'
                            }
                        },
                        {
                            xtype: 'container',
                            margin: '0 0 0 20',
                            defaults: {
                                margin: '0 0 0 10',
                                height: 50
                            },
                            layout: 'hbox',
                            items: [
                                {
                                    xtype: 'button',
                                    height: 30,
                                    width: 100,
                                    text: 'Stop Audio',
                                    listeners: {
                                        tap: 'onBtnViewTap1'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    height: 30,
                                    width: 100,
                                    text: 'Start Audio',
                                    listeners: {
                                        tap: 'onBtnStopTap1'
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'container',
                    height: '100%',
                    itemId: 'mycontainer26',
                    userCls: 'video-parent',
                    html: '<canvas id="video-canvas" class="video"></canvas><canvas id="audio-canvas" class="audio"></canvas>'
                }
            ]
        },
        {
            xtype: 'container',
            title: 'Data',
            iconCls: 'x-fa fa-signal',
            items: [
                {
                    xtype: 'cartesian',
                    height: 250,
                    hidden: false,
                    itemId: 'steeringChart',
                    animation: false,
                    colors: [
                        '#115fa6',
                        '#94ae0a',
                        '#a61120',
                        '#ff8809',
                        '#ffd13e',
                        '#a61187',
                        '#24ad9a',
                        '#7c7474',
                        '#a66111'
                    ],
                    bind: {
                        store: '{steeringChartStore}'
                    },
                    axes: [
                        {
                            type: 'numeric',
                            grid: {
                                odd: {
                                    fill: '#e8e8e8'
                                }
                            },
                            maximum: 1100,
                            minimum: -100,
                            position: 'left',
                            title: 'Position'
                        }
                    ],
                    series: [
                        {
                            type: 'line',
                            colors: [
                                'rgba(200,0,0,0.3)'
                            ],
                            style: {
                                stroke: 'rgb(200,0,0)',
                                step: true
                            },
                            xField: 'x',
                            yField: 'steeringCurrent'
                        },
                        {
                            type: 'line',
                            colors: [
                                'rgba(0,200,0,0.3)'
                            ],
                            style: {
                                stroke: 'rgb(0,200,0)',
                                step: true
                            },
                            xField: 'x',
                            yField: 'steeringTargetPoint'
                        }
                    ]
                }
            ]
        },
        {
            xtype: 'panel',
            itemId: 'tabInternet',
            bodyPadding: 20,
            iconCls: 'x-fa fa-globe',
            title: 'Internet',
            items: [
                {
                    xtype: 'textfield',
                    itemId: 'internetServer',
                    name: 'internetServer',
                    label: 'Server',
                    labelWidth: 65,
                    value: 'vcn2.roboprojects.com:8055'
                },
                {
                    xtype: 'textfield',
                    itemId: 'internetKey',
                    name: 'internetKey',
                    label: 'Key',
                    labelWidth: 65,
                    value: 'API key goes here'
                },
                {
                    xtype: 'togglefield',
                    itemId: 'enableInternetVideo',
                    name: 'enableStreamToInternet',
                    label: 'Stream To Internet',
                    labelWidth: 140,
                    listeners: {
                        change: 'onMytogglefieldChange'
                    }
                },
                {
                    xtype: 'togglefield',
                    itemId: 'mytogglefield1',
                    label: 'Control via Internet',
                    labelWidth: 140,
                    listeners: {
                        change: 'onMytogglefield1Change'
                    }
                }
            ]
        },
        {
            xtype: 'tabpanel',
            title: 'Config',
            iconCls: 'x-fa fa-cog',
            itemId: 'tabConfig',
            padding: '4 0 0 0',
            items: [
                {
                    xtype: 'container',
                    title: 'Connection Guide',
                    iconCls: 'x-fa fa-plug',
                    html: '<img src="resources/raspberry_pi_pins.png">'
                },
                {
                    xtype: 'container',
                    title: 'Hardware',
                    iconCls: 'x-fa fa-microchip',
                    itemId: 'hardwareConfigs',
                    padding: '0 0 0 10',
                    scrollable: true,
                    items: [
                        {
                            xtype: 'toolbar',
                            itemId: 'mytoolbar1',
                            docked: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    iconCls: 'x-fa fa-save',
                                    text: 'Save Changes',
                                    listeners: {
                                        tap: 'onMybutton1Tap'
                                    }
                                },
                                {
                                    xtype: 'button',
                                    iconCls: 'x-fa fa-plus',
                                    text: 'Add Hardware',
                                    listeners: {
                                        tap: 'onMybutton5Tap'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'container',
                            itemId: 'noHardwareMsg',
                            userCls: 'text-prompt-container',
                            html: 'No Hardware Configured<BR><BR>Click <B><U>Add Hardware</U></B>',
                            padding: 40
                        },
                        {
                            xtype: 'container',
                            itemId: 'hardwareItems',
                            padding: 10
                        }
                    ]
                },
                {
                    xtype: 'tabpanel',
                    title: 'Control',
                    iconCls: 'x-fa fa-gamepad',
                    itemId: 'mytabpanel1',
                    items: [
                        {
                            xtype: 'container',
                            title: 'Controls',
                            iconCls: 'x-fa fa-cogs',
                            scrollable: true,
                            items: [
                                {
                                    xtype: 'toolbar',
                                    itemId: 'mytoolbar2',
                                    docked: 'top',
                                    items: [
                                        {
                                            xtype: 'button',
                                            iconCls: 'x-fa fa-save',
                                            text: 'Save Changes',
                                            listeners: {
                                                tap: 'onMybutton1Tap1'
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            iconCls: 'x-fa fa-plus',
                                            text: 'Add Control',
                                            listeners: {
                                                tap: 'onMybutton5Tap1'
                                            }
                                        }
                                    ]
                                },
                                {
                                    xtype: 'container',
                                    itemId: 'noControlsMsg',
                                    userCls: 'text-prompt-container',
                                    html: 'No Controls Configured<BR><BR>Click <B><U>Add Control</U></B>',
                                    padding: 40
                                },
                                {
                                    xtype: 'container',
                                    itemId: 'controlItems',
                                    padding: 10
                                }
                            ]
                        },
                        {
                            xtype: 'gamepadmapping',
                            itemId: 'controllerMapping',
                            title: 'Controller Mapping',
                            iconCls: 'x-fa fa-gamepad',
                            listeners: {
                                websocketsend: 'onContainerWebsocketsend',
                                mappingsUpdated: 'onContainerMappingsUpdated'
                            }
                        }
                    ],
                    tabBar: {
                        docked: 'top',
                        padding: '10 0 0 100'
                    },
                    listeners: {
                        activeItemchange: 'onMytabpanel1ActiveItemChange'
                    }
                },
                {
                    xtype: 'container',
                    title: 'Tools',
                    iconCls: 'x-fa fa-wrench',
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'mybutton2',
                            margin: 40,
                            iconCls: 'x-fa fa-usb',
                            text: 'Restart USB',
                            listeners: {
                                tap: 'onMybutton2Tap'
                            }
                        }
                    ]
                },
                {
                    xtype: 'container',
                    title: 'Config Import/Export',
                    iconCls: 'x-fa fa-exchange',
                    layout: 'fit',
                    items: [
                        {
                            xtype: 'toolbar',
                            hidden: false,
                            docked: 'top',
                            items: [
                                {
                                    xtype: 'button',
                                    text: 'Load Defaults',
                                    listeners: {
                                        tap: 'onMybutton13Tap'
                                    }
                                },
                                {
                                    xtype: 'spacer',
                                    width: 150
                                },
                                {
                                    xtype: 'button',
                                    disabled: true,
                                    text: 'Save',
                                    listeners: {
                                        tap: 'onMybutton11Tap'
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'textareafield',
                            itemId: 'fullConfig',
                            margin: 10,
                            label: 'Full Config',
                            labelAlign: 'top',
                            readOnly: true
                        }
                    ]
                },
                {
                    xtype: 'container',
                    title: 'Log',
                    iconCls: 'x-fa fa-list',
                    layout: 'fit',
                    items: [
                        {
                            xtype: 'textareafield',
                            itemId: 'logEntries',
                            margin: 10,
                            labelAlign: 'top'
                        }
                    ]
                }
            ],
            tabBar: {
                docked: 'top',
                padding: '10 0 0 50'
            }
        }
    ],
    listeners: {
        painted: 'onFormpanelPainted',
        activeItemchange: 'onTabpanelActiveItemChange',
        controllerIgnoreStart: 'onTabpanelControllerIgnoreStart',
        controllerIgnoreStop: 'onTabpanelControllerIgnoreStop'
    },

    onMybutton8Tap: function(button, e, eOpts) {
        if(!this.controllerWindow){
            this.controllerWindowControls = Ext.create({
                xtype: 'livecontrols',
                itemId: 'liveControls',
                liveControlsConfig: this.liveControlsConfig,
                listeners: {
                    scope:this,
                    websocketSend: function(msg){
                        this.websocketSend(msg);
                    }
                }
            });
            this.controllerWindow = Ext.create({
                xtype:'dialog',
                title:'Controls',
                //centered:true,
                //x:100,
                //y:100,
                modal:false,
                //floated:true,
                closable:true,
                closeAction:'hide',
                resizable:{edges:['se','s','e']},
                items:this.controllerWindowControls
            });
        }
        this.controllerWindow.showAt(100,100);
        if(this.liveControlsConfig){
            this.liveControlsWindow = this.controllerWindowControls.loadConfig(this.liveControlsConfig, this.hardware);
        }

    },

    onContainerAction: function(mapping, value) {
        if(this.liveControls && this.liveControls.controlId && this.liveControls.controlId[mapping.controlId]){

        let control = this.liveControls.controlId[mapping.controlId];

            switch(control.xtype){
                case 'controlbutton':
                    control.setValue(value===true ? 'down' : 'up');
                    break;
                case 'basecontrolslider':
                    //control.setSliderValue(value * 100);
                    control.setValue(value * 100);
                    break;
                case 'basecontrolstick':
                    control.setValue(value[0], value[1]);
            }
        }else{
            console.error('Controller mapping to invalid controlId ', mapping.controlId);
        }


        if(this.liveControlsWindow && this.liveControlsWindow.controlId && this.liveControlsWindow.controlId[mapping.controlId]){
            let controlWin = this.liveControlsWindow.controlId[mapping.controlId];

            switch(controlWin.xtype){
                case 'controlbutton':
                    controlWin.setRawValue(value===true ? 'down' : 'up');
                    break;
                case 'basecontrolslider':
                    //control.setSliderValue(value * 100);
                    controlWin.setRawValue(value * 100);
                    break;
                case 'basecontrolstick':
                    controlWin.setRawValue(value[0], value[1]);
            }
        }else{
            console.error('Controller Win mapping to invalid controlId ', mapping.controlId);
            return;
        }
    },

    onContainerWebsocketSend: function(msg) {
        this.websocketSend(msg);
    },

    onBtnViewTap: function(button, e, eOpts) {
        this.startVideo();
    },

    onBtnStopTap: function(button, e, eOpts) {
        this.websocketSendAction('stopVideo');
    },

    onBtnViewTap1: function(button, e, eOpts) {
        this.websocketSendAction('stopAudio');
    },

    onBtnStopTap1: function(button, e, eOpts) {
        this.websocketSendAction('startAudio');
    },

    onMytogglefieldChange: function(togglefield, newValue, oldValue, eOpts) {

        this.websocketSend({
            action:'internetVideo',
            enabled:newValue,
            server:this.queryById('internetServer').getValue(),
            key:this.queryById('internetKey').getValue()
        });
    },

    onMytogglefield1Change: function(togglefield, newValue, oldValue, eOpts) {
        this.websocketSend({
            action:'internetControl',
            enabled:newValue,
            server:this.queryById('internetServer').getValue(),
            key:this.queryById('internetKey').getValue()
        });
    },

    onMybutton1Tap: function(button, e, eOpts) {
        this.hardwareSave();
    },

    onMybutton5Tap: function(button, e, eOpts) {
        this.hardwareShowAdd();
    },

    onMybutton1Tap1: function(button, e, eOpts) {
        this.controlSave();
    },

    onMybutton5Tap1: function(button, e, eOpts) {
        this.controlShowAdd();
    },

    onContainerWebsocketsend: function(data) {
        this.websocketSend(data);
    },

    onContainerMappingsUpdated: function(newMappings) {
        this.config.controllerMapping = newMappings;

        this.configLoad(this.config);
    },

    onMytabpanel1ActiveItemChange: function(sender, value, oldValue, eOpts) {
        let activeItemId = value.getItemId();

        let controllerMapping = this.queryById('controllerMapping');
        if(activeItemId === 'controllerMapping'){
            controllerMapping.startControllerLoop();
        }else{
            controllerMapping.stopControllerLoop();
        }
    },

    onMybutton2Tap: function(button, e, eOpts) {
        this.websocketSend({
            action:'restartUsb'
        });
    },

    onMybutton13Tap: function(button, e, eOpts) {
        this.websocketSend({
            action:'configDefaults'
        });
    },

    onMybutton11Tap: function(button, e, eOpts) {

    },

    onFormpanelPainted: function(sender, element, eOpts) {
        if(this.init){
            return;
        }else{
            this.init = true;
        }

        this.webSocketCon = null;
        this.messageQueue = [];
        this.websocketInit();

        this.liveControls = {};
        this.liveControlsConfig = false;
        this.websocketSendAction("configRead",true);

        //this.controllerInit();
        this.queryById('liveController').initController();

        this.hardware = {};
        this.getViewModel().getStore('hardwareStore').on('datachanged',function(){
            this.controlSyncHardwareStores();
        }, this);
    },

    onTabpanelActiveItemChange: function(sender, value, oldValue, eOpts) {
        let activeItemId = value.getItemId();
        if(activeItemId === 'tabVideo'){
            this.startVideo();
            this.websocketSendAction('startAudio');
        }

        let liveController = this.queryById('liveController');
        let controllerMapping = this.queryById('controllerMapping');

        if(activeItemId === 'tabConfig'){
            controllerMapping.startControllerLoop();
            liveController.stopControllerLoop();
        }else{
            controllerMapping.stopControllerLoop();
            liveController.startControllerLoop();
        }
    },

    onTabpanelControllerIgnoreStart: function(tabpanel) {
        console.log('ignoring controller events!');
        this.controllerIgnore = true;
    },

    onTabpanelControllerIgnoreStop: function(tabpanel) {
        this.controllerIgnore = false;
    },

    trexscream: function() {
        this.websocketSendAction('trexscream');
    },

    playnextsound: function() {
        this.websocketSendAction('playnextsound');
    },

    websocketSend: function(message, queue) {
        var queueP = queue || false;

        if(this.webSocketCon === null || this.webSocketCon.readyState !== WebSocket.OPEN){
            console.log('Sending to WebSocket failed - not connected');
            if(queueP){
                this.messageQueue.push(message);
            }
            return false;
        }

        this.webSocketCon.send(Ext.encode(message));
    },

    websocketSendAction: function(action, queue) {
        var queueP = queue || false;

        this.websocketSend({
            action:action
        }, queueP);
    },

    websocketInit: function() {
        this.messageQueue = [];

        this.webSocketCon = null;

        this.websocketOpen();
    },

    websocketOpen: function() {
        if(this.webSocketCon !== null &&
           ( this.webSocketCon.readyState === WebSocket.CONNECTING ||
            this.webSocketCon.readyState === WebSocket.OPEN )
          ){
            //if the socket is already open, or connecting. dont open more than 1
            this.appendDebugOutput("Websocket already open or connecting");
            return;
        }

        this.appendDebugOutput("Opening Websocket");

        try{
            this.webSocketCon = new WebSocket('ws://'+window.location.host+'/wsapi');
        }catch(err){
            this.appendDebugOutput("Exception opening socket!");
            this.appendDebugOutput(err.message);
            this.webSocketCon = null;
            return false;
        }

        this.webSocketCon.onopen = function(){
            this.websocketSendAction('getStatus');
            if(this.messageQueue.length > 0){
                Ext.each(this.messageQueue, function(msg){
                    this.websocketSend(msg);
                }, this);
                this.messageQueue = [];
            }
        }.bind(this);

        this.webSocketCon.onmessage = this.websocketReceive.bind(this);

        this.webSocketCon.onerror = function(event){
            this.appendDebugOutput("error with websocket! " + event.error);
        }.bind(this);

        this.webSocketCon.onclose = function(event){
            this.appendDebugOutput("websocket closed! "+event.code+" "+event.reason);

            this.webSocketCon = null;
            this.websocketReconnect();
        }.bind(this);

    },

    websocketReconnect: function() {
        Ext.defer(function(){ this.websocketOpen(); },500,this);
    },

    websocketReceive: function(message) {
        // console.log('recieved message');
        // console.log(message.data);
        //this.appendDebugOutput('recieved message: '+message.data);


        var jsonData = JSON.parse(message.data);

        if(!jsonData.cmd){
            console.log('websocketReceive Missing cmd!', jsonData);
            return false;
        }
        switch(jsonData.cmd){
            default:
                console.log('websocketReceive Invalid cmd!', jsonData);
                break;
            case 'config':
                this.configLoad(jsonData.config);
                break;
            case 'status':
                this.msgUpdateStatus(jsonData);
                break;
            case 'pidConstants':
                this.msgUpdatePidConstants(jsonData);
                break;
            case 'videoRunning':
                this.checkVideoRunningResponse(jsonData);
                break;
        }


    },

    configLoad: function(config) {
        this.showConfig(config);
        this.config = config;

        if(config.hardware){
            this.hardwareLoadConfig(config.hardware, true);
        }
        let controllerMapping = this.queryById('controllerMapping');

        if(config.controls){
            this.controlsLoadConfig(config.controls);
            this.liveControls = this.queryById('liveControls').loadConfig(config.controls, this.hardware);
            this.liveControlsConfig = config.controls;
            controllerMapping.updateMappingStores(config.controls);
            if(this.controllerWindowControls){
                this.liveControlsWindow = this.controllerWindowControls.loadConfig(config.controls, this.hardware);
            }
        }
        if(config.controllerMapping){
            controllerMapping.loadConfig(config.controllerMapping);
            this.queryById('liveController').loadConfig(config.controllerMapping);
        }
    },

    controlShowAdd: function() {
        if(!this.addControlTypeWin){

            this.addControlTypeWin = Ext.create({
                xtype:'addcontroltype',
                floated:true,
                modal:true,
                listeners:{
                    scope:this,
                    typeselected:function(type){
                        this.controlAdd(type);
                    }
                }
            });

        }

        this.addControlTypeWin.show();
    },

    controlAdd: function(type, config) {
        config = config || false;

        if(config.hardwareId){
            config.hardware = this.hardware[config.hardwareId];
        }

        var panel;

        switch(type){
            default:
                return false;
            case 'motorslider':
            case 'button':
            case 'stick':
            case 'slider':
                panel = Ext.create({
                    xtype:'control'+type+'config',
                    hidden:true,
                    margin:'3 0 0 0',
                    label:config.name,
                    hardware: config.hardware,
                    controlId: config.controlId ? config.controlId : this.generateId(),
                    listeners:{
                        scope:this,
                        controlmoveup:function(){
                            this.controlMove(panel,'up');
                        },
                        controlmovedown:function(){
                            this.controlMove(panel,'down');
                        },
                        controldelete:function(){
                            this.controlDelete(panel);
                        }
                    }
                });
                break;

        }

        this.queryById('noControlsMsg').hide();

        this.queryById('controlItems').add(panel);

        panel.show({type:'slide', direction:'right'});

        let hardware = panel.queryById('hardware');
        if(hardware && hardware.syncHardwareStore){
            hardware.syncHardwareStore(this.getViewModel().getStore('hardwareStore'));
        }
        if(type==='stick'){
            panel.queryById('xhardware').syncHardwareStore(this.getViewModel().getStore('hardwareStore'));
            panel.queryById('yhardware').syncHardwareStore(this.getViewModel().getStore('hardwareStore'));
        }

        if(config && panel.setConfigValues){
            panel.setConfigValues(config);
        }
    },

    controlSave: function() {
        let controlItems = this.queryById('controlItems');

        let controlConfig = [];
        Ext.each(controlItems.items.items, function(item){
            controlConfig.push(item.getConfigValues());
        });

        this.websocketSend({
            action:'updateConfig',
            key:'controls',
            config:controlConfig
        });

        this.controlsLoadConfig(controlConfig);
        this.liveControls = this.queryById('liveControls').loadConfig(controlConfig, this.hardware);

        this.queryById('controllerMapping').updateMappingStores(controlConfig);
    },

    controlsLoadConfig: function(controls) {
        this.queryById('controlItems').removeAll();

        Ext.each(controls,function(controlItem){
            this.controlAdd(controlItem.type, controlItem);
        },this);
    },

    controlDelete: function(panel) {
        Ext.destroy(panel);

        if(this.queryById('controlItems').getItems().length < 1){
            this.queryById('noControlsMsg').show({type:'fade'});
        }
    },

    controlMove: function(control, direction) {
        let parent = this.queryById('controlItems');

        let currentIndex = parent.items.items.indexOf(control);

        if(direction === 'up'){
            currentIndex--;
        }else{
            currentIndex++;
        }

        parent.remove(control, false);
        parent.insert(currentIndex, control);

    },

    controlSyncHardwareStores: function() {
        let hardwareStore = this.getViewModel().getStore('hardwareStore');

        Ext.each(this.queryById('controlItems').items.items, function(item){
            let hardware = item.queryById('hardware');
            if(hardware && hardware.syncHardwareStore){
                hardware.syncHardwareStore(hardwareStore);
            }else{
                console.log('missing syncHardwareStore func on component', item);
            }
        });
    },

    hardwareLoadConfig: function(hardware, animate) {
        console.log('hardwareLoadConfig');
        this.hardware = {};
        for(var i in hardware){
            let hi = hardware[i];
            this.hardware[hi.hardwareId] = hi;
            if(hi.type==='motor' && hi.motorDriverType==='l298n'){
                this.hardware[hi.hardwareId+':1'] = hi;
                this.hardware[hi.hardwareId+':2'] = hi;
            }
        }

        let hardwareStore = this.getViewModel().getStore('hardwareStore');

        let model = hardwareStore.getModel();

        this.queryById('hardwareItems').removeAll(true,true);

        let hardwareRecords = [];

        Ext.each(hardware,function(itemConfig){
            this.hardwareAdd(itemConfig.type, itemConfig, animate);

            switch(itemConfig.type){
                default:
                    hardwareRecords.push(model.create(itemConfig));
                    break;
                case 'motor':
                    switch(itemConfig.motorDriverType){
                        case 'l298n':
                            let hardwareId = itemConfig.hardwareId;

                            let motor1 = {
                                display:itemConfig.type+' '+itemConfig.name1,
                                name:itemConfig.name1,
                                type:itemConfig.type,
                                hardwareId: itemConfig.hardwareId+':1'
                            };
                            hardwareRecords.push(model.create(motor1));


                            let motor2 = {
                                display:itemConfig.type+' '+itemConfig.name2,
                                name:itemConfig.name2,
                                type:itemConfig.type,
                                hardwareId: itemConfig.hardwareId+':2'
                            };
                            hardwareRecords.push(model.create(motor2));
                            break;
                        case 'pwmesc':
                            itemConfig.name = itemConfig.name1;
                            hardwareRecords.push(model.create(itemConfig));
                            break;
                    }
            }
        },this);

        hardwareStore.removeAll();
        hardwareStore.add(hardwareRecords);
    },

    hardwareAdd: function(type, config, animate) {
        config = config || false;

        let xtype;

        switch(type){
            default:
                return false;
            case 'motor':
            case 'i2c':
            case 'gpio':
            case 'servo':
                xtype = 'hardware' + type;
                break;
        }
        let panel = Ext.create({
             xtype:xtype,
             hidden:animate ? true : false,
             //userCls:'hardware-panel',
             //innerCls:'hardware-panel-inner',
             margin:'3 0 0 0',
             border:true,
             listeners:{
                 scope:this,
                 hardwaredelete:function(hardware){
                     this.hardwareDelete(hardware);
                 }
             }
         });

        this.queryById('noHardwareMsg').hide();

        this.queryById('hardwareItems').add(panel);
        if(animate){
            panel.show({type:'slide', direction:'right'});
        }

        if(!config){
            config = {
                name:'',
                type:type,
                config:{},
                hardwareId:this.generateId()
            };

        }
        panel.setConfigValues(config);
    },

    hardwareShowAdd: function() {
        if(!this.addHardwareTypeWin){

            this.addHardwareTypeWin = Ext.create({
                xtype:'addhardwaretype',
                floated:true,
                modal:true,
                listeners:{
                    scope:this,
                    typeselected:function(type){
                        this.hardwareAdd(type);
                    }
                }
            });

        }

        this.addHardwareTypeWin.show();
    },

    hardwareDelete: function(hardware) {
        Ext.destroy(hardware);

        if(this.queryById('hardwareItems').getItems().length < 1){
            this.queryById('noHardwareMsg').show({type:'fade'});
        }

        //this.getViewModel().getStore('hardwareStore').remove(hardware.hardwareStoreRec);

        //hardware.hardwareStoreRec.destroy();
        //delete hardware.hardwareStoreRec;

        //this.syncControlStores();
    },

    generateId: function() {
        let id = (+new Date()).toString(36);
        return id;
    },

    hardwareSave: function() {
        let hardwareItems = this.queryById('hardwareItems');

        let hardwareConfig = [];

        //let hardwareStore = this.getViewModel().getStore('hardwareStore');
        //hardwareStore.removeAll();
        //let model = hardwareStore.getModel();
        //let hardwareRecords = [];
        let usedPins = [];
        let pinErrors = [];
        let pinError = 'Invalid Pin';

        let configValid = true;
        Ext.each(hardwareItems.items.items, function(hardwareItem){
            if(!hardwareItem.validate()){
                pinErrors.push("Invalid Pin Numbers! Please only use pin # 2 to 27.");
                configValid = false;
            }

            let hardwareItemValues = hardwareItem.getConfigValues();

            switch(hardwareItemValues.type){
                case 'motor':
                    switch(hardwareItemValues.motorDriverType){
                        case 'pca9685':
                            break;
                        case 'l298n':
                            if(hardwareItemValues.aen == '' ) break;
                            if( usedPins.includes(hardwareItemValues.aen)){
                                pinErrors.push('L298 Motor Pin # '+hardwareItemValues.aen+' for A EN is used in more than once!');
                                hardwareItem.queryById('aen').setError(pinError);
                                configValid = false;
                            }
                            usedPins.push(hardwareItemValues.aen);

                            if(hardwareItemValues.ain1 != '' ) break;
                                if(usedPins.includes(hardwareItemValues.ain1)){
                                    pinErrors.push('L298 Motor Pin # '+hardwareItemValues.ain1+' for A IN1 is used in more than once!');
                                    hardwareItem.queryById('ain1').setError(pinError);
                                    configValid = false;
                                }
                                usedPins.push(hardwareItemValues.ain1);

                            if(hardwareItemValues.ain2 != '' ) break;
                            if(usedPins.includes(hardwareItemValues.ain2)){
                                pinErrors.push('L298 Motor Pin # '+hardwareItemValues.ain2+' for A IN2 is used in more than once!');
                                hardwareItem.queryById('ain2').setError(pinError);
                                configValid = false;
                            }
                            usedPins.push(hardwareItemValues.ain2);

                            if(hardwareItemValues.ben != '' ) break;
                            if(usedPins.includes(hardwareItemValues.ben)){
                                pinErrors.push('L298 Motor Pin # '+hardwareItemValues.ben+' for B EN is used in more than once!');
                                hardwareItem.queryById('ben').setError(pinError);
                                configValid = false;
                            }
                            usedPins.push(hardwareItemValues.ben);

                            if(hardwareItemValues.bin3 != '' ) break;
                            if( usedPins.includes(hardwareItemValues.bin3)){
                                pinErrors.push('L298 Motor Pin # '+hardwareItemValues.bin3+' for B IN3 is used in more than once!');
                                hardwareItem.queryById('bin3').setError(pinError);
                                configValid = false;
                            }
                            usedPins.push(hardwareItemValues.bin3);

                            if(hardwareItemValues.bin4 != '' ) break;
                            if( usedPins.includes(hardwareItemValues.bin4)){
                                pinErrors.push('L298 Motor Pin # '+hardwareItemValues.bin4+' for B IN4 is used in more than once!');
                                hardwareItem.queryById('bin4').setError(pinError);
                                configValid = false;
                            }
                            usedPins.push(hardwareItemValues.bin4);
                            break;

                        case 'esc':
                            if(hardwareItemValues.pin == null ){
                                pinErrors.push('RC ESC Motor Pin is required');
                                hardwareItem.queryById('pin').setError(pinError);
                                configValid = false;
                                break;
                            }
                            if(usedPins.includes(hardwareItemValues.pin)){
                                pinErrors.push('RC ESC Motor Pin # '+hardwareItemValues.pin+' is used in more than once!');
                                hardwareItem.queryById('pin').setError(pinError);
                                configValid = false;
                            }
                            usedPins.push(hardwareItemValues.pin);
                            break;
                    }
                    break;
                case 'i2c':
                    break;
                case 'gpio':
                case 'servo':
                    if(hardwareItemValues.pin == null ){
                        pinErrors.push('Pin is required');
                        hardwareItem.queryById('pin').setError(pinError);
                        configValid = false;
                        break;
                    }
                    if(usedPins.includes(hardwareItemValues.pin)){
                        pinErrors.push('Pin '+hardwareItemValues.pin+' is used in more than once!');
                        hardwareItem.queryById('pin').setError(pinError);
                        configValid = false;
                    }
                    usedPins.push(hardwareItemValues.pin);
                    break;

            }

            hardwareConfig.push(hardwareItemValues);

            //hardwareRecords.push(model.create(vals));
        });
        if(configValid !== true){
            Ext.Msg.alert('Errors Found!',pinErrors.join('<BR><BR>'));
            return;
        }

        //panel.hardwareStoreRec = model.create(config);
        //this.getViewModel().getStore('hardwareStore').add(panel.hardwareStoreRec);

        this.websocketSend({
            action:'updateConfig',
            key:'hardware',
            config:hardwareConfig
        });

        this.hardwareLoadConfig(hardwareConfig, false);
        //hardwareStore.add(hardwareRecords);
        //this.controlSyncHardwareStores();
    },

    stopSteeringMovement: function() {
        this.websocketSendAction('stopSteeringMovement');
    },

    sendMove: function(value) {
        clearInterval(this.repeatMoveTimer);

        this.websocketSend({
            action:'move',
            y:this.moveY,
            x:this.moveX
        });

        //if we are not stopped and nothings changed repeat the control message every 400ms.
        if(this.moveY === 500 && this.moveX === 500){
            clearInterval();
        }else{
            this.repeatMoveTimer = setInterval(() => {
                this.websocketSend({
                    action:'move',
                    y:this.moveY,
                    x:this.moveX
                });
            },400);
        }
    },

    msgUpdateStatus: function(jsonData) {
        // this.recievedMessages++;
        this.chartedMessages++;


        // if(this.recievedMessages > 100){
        //     this.recievedMessages = 0;
        //     this.clearDebugOutput();
        //     //chartStore.removeAll();
        // }



        if(this.chartStore.count() > 100){
            this.chartStore.removeAt(0,1);
        }

        //this.steeringChart.suspendAnimation();
        // if(this.chartArray.length > 100){
        //     this.chartArray.shift();
        // }
        // this.chartArray.push([this.chartedMessages, jsonData.steeringCurrent, jsonData.steeringTargetPoint]);

        // this.chartStore.loadData(this.chartArray);

        this.chartStore.loadData([[this.chartedMessages, jsonData.steeringCurrent, jsonData.steeringTarget]], true);

        //this.steeringChart.resumeAnimation();

        this.queryById('steeringCurrent').setValue(jsonData.steeringCurrent);
        this.queryById('pidError').setValue(jsonData.pidError);
    },

    msgUpdatePidConstants: function(jsonData) {
        this.queryById('pidConstantP').setValue(jsonData.p);
        this.queryById('pidConstantI').setValue(jsonData.i);
        this.queryById('pidConstantD').setValue(jsonData.d);
    },

    controllerInitDeleteMe: function() {
        this.controllerIgnore = false;

        this.lastSteeringChangeDefered = false;
        this.moveX = 500;
        this.moveY = 500;

        this.repeatMoveTimer = null;

        window.addEventListener("gamepadconnected", this.gamepadConnected.bind(this));
        window.addEventListener("gamepaddisconnected", this.gamepadDisconnected.bind(this));

        this.trexPanSlider = this.queryById('trexPanSlider');
        this.trexTiltSlider = this.queryById('trexTiltSlider');

        //this.fieldGamepadLeftRight = this.queryById('gamepadRightLeft');
        //this.fieldGamepadFwd = this.queryById('gamepadFwd');
        //this.fieldGamepadRev = this.queryById('gamepadRev');

        this.fieldGamepadRightX = this.queryById('gamepadRightX');
        this.fieldGamepadRightY = this.queryById('gamepadRightY');

        this.fieldGamepadLeftX = this.queryById('gamepadLeftX');
        this.fieldGamepadLeftY = this.queryById('gamepadLeftY');

        this.fieldSteeringSetPointText = this.queryById('steeringSetPointText');
        this.fieldThrottleText = this.queryById('throttleText');

        this.fieldShootText = this.queryById('shootText');

        this.wsLeftStickX = -1;
        this.wsLeftStickY = -1;
        this.wsRightStickX = -1;
        this.wsRightStickY = -1;
        this.wsTriggerRight = -1;
    },

    gamepadConnected: function(e) {
        console.log("gamepad connected");
        console.log(e);

            this.appendDebugOutput("Gamepad #"+e.gamepad.index+" connected. Name: "+e.gamepad.id+". "+e.gamepad.buttons.length+" with "+e.gamepad.axes.length+" axes");


        //if(e.gamepad.id.indexOf('Xbox') !== -1){
            this.gamepadBeginLoop(e.gamepad);
        //}else{
        //    this.appendDebugOutput("Not an xbox controller. Skipping!");
        //}
    },

    gamepadDisconnected: function(e) {

            console.log("gamepad disconnected");
            console.log(e);

            this.appendDebugOutput("Gamepad disconnected at index "+e.gamepad.index+", id "+e.gamepad.id);

            clearInterval(this.gamePadLoops[e.gamepad.id]['loop']);
    },

    gamepadBeginLoop: function(gamepad) {
        if(!this.gamePadLoops){
            this.gamePadLoops = {};
        }

        if(this.gamePadLoops[gamepad.id]){
            return;
        }
        this.gamePadLoops[gamepad.id] = {
            gamepad:gamepad
        };

        this.gamePadLoops[gamepad.id]['loop'] = setInterval(this.gamepadUpdate.bind(this), 50, gamepad);

    },

    gamepadUpdate: function(gamepad) {
        return;

        if(this.controllerIgnore){
            console.log('ignored! gamepadUpdate');
            return;
        }
        console.log('gamepadUpdate');

        var gamepadUpdate = navigator.getGamepads();

        if(gamepadUpdate[gamepad.index]){
            gamepad = gamepadUpdate[gamepad.index];
        }else{
            console.log('gamepad no longer available?');
            clearInterval(this.gamePadLoops[e.gamepad.id]['loop']);
            return;
        }
        //console.log(gamepad);

        //console.log('Fwd: '+gamepad.buttons[7].value);
        //console.log('Rev: '+gamepad.buttons[6].value);

        //console.log('Right: '+gamepad.axes[2]);

        //X button
        if(gamepad.buttons[2].value == 1 && this.button2lastValue != gamepad.buttons[2].value){
            this.trexscream();
        }
        this.button2lastValue = gamepad.buttons[2].value;

        //Y button
        if(gamepad.buttons[3].value == 1 && this.button3lastValue != gamepad.buttons[3].value){
            this.playnextsound();
        }
        this.button3lastValue = gamepad.buttons[3].value;


        var leftStickX = gamepad.axes[0];
        this.fieldGamepadLeftX.setValue(leftStickX);
        var leftStickXslider = Math.round((leftStickX * 500) + 500);
        if(leftStickXslider !== this.wsLeftStickX ){
            this.wsLeftStickX = leftStickXslider;
            this.fieldSteeringSetPointText.setValue(leftStickXslider);
        }

        var leftStickY = gamepad.axes[1];
        this.fieldGamepadLeftY.setValue(leftStickY);
        var leftStickYslider = 1000 - Math.round((leftStickY * 500) + 500);
        if(leftStickYslider !== this.wsLeftStickY ){
            this.wsLeftStickY = leftStickYslider;
            this.fieldThrottleText.setValue(leftStickYslider);
        }

        var rightStickX = gamepad.axes[2];
        this.fieldGamepadRightX.setValue(rightStickX);
        var rightStickXslider = 1000 - Math.round((rightStickX * 500) + 500);
        if(rightStickXslider !== this.wsRightStickX ){
            this.wsRightStickX = rightStickXslider;
            this.trexPanSlider.setValue(rightStickXslider);
        }


        var rightStickY = gamepad.axes[3];
        this.fieldGamepadRightY.setValue(rightStickY);
        var rightStickYslider = Math.round((rightStickY * 500) + 500);
        if(rightStickYslider !== this.wsRightStickY ){
            this.wsRightStickY = rightStickYslider;
            this.trexTiltSlider.setValue(rightStickYslider);
        }

        var triggerRight = gamepad.buttons[7].value;
        //this.fieldGamepadFwd.setValue(triggerRight);

        var triggerLeft = gamepad.buttons[6].value;
        //this.fieldGamepadRev.setValue(triggerLeft);


        if(triggerRight >= 0.8){
            triggerRight = 1;
        }else{
            triggerRight = 0;
        }
        if(triggerRight !== this.wsTriggerRight ){
            this.wsTriggerRight = triggerRight;
            this.fieldShootText.setValue(triggerRight);
        }

        if(this.virtualController){
            var vsRx = rightStickX * 50;
            var vsRy = rightStickY * 50;
            var vsLx = leftStickX * 50;
            var vsLy = leftStickY * 50;

            //console.log(vsRx, vsRy, vsLx, vsLy);
            this.virtualControllerStickRight.stick.style.transform = `translate3d(${vsRx}px, ${vsRy}px, 0px)`;
            this.virtualControllerStickLeft.stick.style.transform = `translate3d(${vsLx}px, ${vsLy}px, 0px)`;

            if(triggerRight > 0){
                this.virtualControllerbuttonFire.classList.add("pressed");
            }else{
                this.virtualControllerbuttonFire.classList.remove("pressed");
            }
        }
    },

    showVirtualControllerDeleteMe: function() {
        if(!this.virtualController){
            this.virtualController = Ext.create({
                xtype:'panel',
                title:'Virtual Controller',
                iconCls:'x-fa fa-gamepad',
                floated:true,
                userCls:'controller-window',
                width:500,
                height:300,
                //x:150,
                //y:100,
                closable:true,
                centered:true,
                closeAction:'hide',
                showAnimation:{type:'fade'},
                draggable:true,
                html:'<div class="button-container"><div class="left-buttons">'+
        		'<div class="stick" id="virctrlstickLeft"></div>'+
        		'<button class="btn-fire" id="virctrlbuttonFire"></button>'+
        	'</div>'+
        	'<div class="right-buttons">'+
        		'<div class="stick" id="virctrlstickRight"></div>'+
        	'</div></div>',
                listeners:{
                    scope:this,

                    painted:function(){
                        //console.log(this);
                        if(!this.buttonsInit){
                            this.buttonsInit = true;
                            this.virtualControllerbuttonFire = document.getElementById('virctrlbuttonFire');
                            createFireButton(this.virtualControllerbuttonFire, function(state){
                                console.log('fire button!', state);
                                if(state==='down'){
                                    this.fieldShootText.setValue(1);
                                }else if(state==='up'){
                                    this.fieldShootText.setValue(0);
                                }

                            }.bind(this));
                            stickRange = 50;
                            this.virtualControllerStickRight = createStick(document.getElementById('virctrlstickRight'), stickRange, 'right', function(pos){
                                //console.log('stick move! right ', pos);
                                this.fieldGamepadRightX.setValue(pos.x);
                                this.fieldGamepadRightY.setValue(pos.y);

                                var x = 1000 - Math.round(((pos.x/50) * 500) + 500);
                                var y = Math.round(((pos.y/50) * 500) + 500);
                                this.trexPanSlider.setValue(x);
                                this.trexTiltSlider.setValue(y);
                            }.bind(this));
                            this.virtualControllerStickLeft = createStick(document.getElementById('virctrlstickLeft'), stickRange, 'left', function(pos){
                                //console.log('stick move! left ', pos);

                                this.fieldGamepadLeftX.setValue(pos.x);
                                this.fieldGamepadLeftY.setValue(pos.y);

                                var x = Math.round(((pos.x/50) * 500) + 500);
                                var y = 1000 - Math.round(((pos.y/50) * 500) + 500);
                                this.fieldSteeringSetPointText.setValue(x);
                                this.fieldThrottleText.setValue(y);
                            }.bind(this));
                        }
                    }
                }
            });

        }
        //console.log(this.virtualController);
        this.virtualController.show();
        let drag = this.virtualController.getDraggable();
        drag.on({
             dragstart:function(drag, event){
                 console.log('drag start');
                 console.log(event);
                 if(event.eventTarget.className==="joystick"){
                     console.log('drag start CANCEL!');
                     //event.stopEvent();
                     return false;
                 }
             },
            beforedragstart:function(drag, event){
                if(event.eventTarget.className==="joystick"){
                    //event.stopEvent();
                    return false;
                }
            }
        });

    },

    clearDebugOutput: function() {
        // console.log(message);
        // console.log(this.queryById('debugOutputContainer'));
        var dom = this.queryById('debugOutputContainer').el.dom;
        // console.log(dom);
        dom.innerHTML = "";
    },

    appendDebugOutput: function(message) {
        console.log(message);

        // console.log(this.queryById('debugOutputContainer'));
        var dom = this.queryById('debugOutputContainer').el.dom;
        // console.log(dom);
        dom.innerHTML += message + "<BR>\r\n";
        // console.log(this.queryById('debugOutputContainerOuter'));
        containerDom = this.queryById('debugOutputContainerOuter').bodyElement.dom;
        containerDom.scrollTop = dom.clientHeight;
    },

    showConfig: function(config) {
        console.log('config from server');
        console.log(config);

        this.config = config;

        this.queryById('fullConfig').setValue(JSON.stringify(config,null,2));
    },

    startVideo: function() {
        if(!this.YesCheckingVideoRunning){
            this.YesCheckingVideoRunning = true;
            this.checkVideoRunning();
        }

        this.websocketSend({
            action:'startVideo'
        }, true);

        if(!this.videoStreamPlayer){
            var canvas = document.getElementById('video-canvas');
            var url = 'ws://'+location.hostname+':'+location.port+'/viewVideo';
            this.videoStreamPlayer = new JSMpeg.Player(url, {canvas: canvas});
        }
        if(!this.audioStreamPlayer){
            var canvas = document.getElementById('audio-canvas');
            var url = 'ws://'+location.hostname+':'+location.port+'/viewAudio';
            this.audioStreamPlayer = new JSMpeg.Player(url, {canvas: canvas});
        }
    },

    checkVideoRunning: function() {
        this.websocketSend({
            action:'readVideoRunning'
        });

        if(this.YesCheckingVideoRunning){
            Ext.defer(function(){
                this.checkVideoRunning();
            }, 3000, this);
        }
    },

    checkVideoRunningResponse: function(response) {
        this.YesCheckingVideoRunning = response.running;
        this.queryById('videoStatus').setHtml('Status: ' + (response.running ? 'Running' : 'Stopped'));
    }

});